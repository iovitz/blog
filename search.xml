<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git</title>
    <url>/2023/06/02/Git/</url>
    <content><![CDATA[<h1 id="Git-学习相关文档"><a href="#Git-学习相关文档" class="headerlink" title="Git 学习相关文档"></a>Git 学习相关文档</h1><p><strong>Git 的官方文档</strong></p>
<ul>
<li><a href="https://git-scm.com/">Git 官网</a></li>
<li><a href="https://git-scm.com/about">Git 官方文档</a></li>
</ul>
<p><strong>Git 的 GUI 工具</strong></p>
<ul>
<li><a href="https://desktop.github.com/">Github Desktop</a></li>
<li><a href="https://www.sourcetreeapp.com/">Sourcetree</a></li>
</ul>
<p><strong>Git 的一些其他资源</strong></p>
<ul>
<li><a href="https://learngitbranching.js.org/">Learn Git Branching</a></li>
</ul>
<h1 id="Git-仓库操作"><a href="#Git-仓库操作" class="headerlink" title="Git 仓库操作"></a>Git 仓库操作</h1><p>克隆仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone &lt;rep url&gt;</span><br></pre></td></tr></table></figure>

<p>设置远程仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:iovitz/&lt;repo name&gt;.git</span><br></pre></td></tr></table></figure>

<h1 id="Git-常用指令"><a href="#Git-常用指令" class="headerlink" title="Git 常用指令"></a>Git 常用指令</h1><p>暂存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>提交</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;&lt;commit message&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>回退</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>

<p>cherry-pick</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git cherry-pick &lt;hash&gt;</span><br></pre></td></tr></table></figure>

<p>fetch</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>研发基建</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>研发基建</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2023/06/06/Linux/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>前端请求建设</title>
    <url>/2023/06/06/%E5%89%8D%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%BB%BA%E8%AE%BE/</url>
    <content><![CDATA[<h1 id="请求封装"><a href="#请求封装" class="headerlink" title="请求封装"></a>请求封装</h1><p>Axios原生请求功能太多了，开发中不一定需要这么多功能，所以这里简单封装一下Axios，简化一下使用流程，并且提供更好的Typescript支持，实际使用时可以根据具体情况对代码进行更改</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123;<span class="keyword">type</span> <span class="title class_">AxiosInstance</span>, <span class="keyword">type</span> <span class="title class_">AxiosRequestConfig</span>, <span class="keyword">type</span> <span class="title class_">AxiosResponse</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 和服务端约定的数据返回格式</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ResponseData</span>&lt;<span class="title class_">Data</span>&gt; &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">Data</span></span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ShortChain</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">axios</span>: <span class="title class_">AxiosInstance</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="keyword">private</span> <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>&lt;<span class="built_in">any</span>&gt;) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">axios</span> = axios.<span class="title function_">create</span>(config)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">res: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get&lt;T&gt; (<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">params</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span> | <span class="built_in">number</span>&gt; = &#123;&#125;, <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span> = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">      ...config,</span><br><span class="line">      params,</span><br><span class="line">    &#125;) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">ResponseData</span>&lt;T&gt;&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post&lt;T&gt; (<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt; = &#123;&#125;, <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span> = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">post</span>(</span><br><span class="line">        url,</span><br><span class="line">        &#123;</span><br><span class="line">          ...data,</span><br><span class="line">        &#125;,</span><br><span class="line">        config,</span><br><span class="line">    ) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">ResponseData</span>&lt;T&gt;&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  put&lt;T&gt; (<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt; = &#123;&#125;, <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span> = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">put</span>(</span><br><span class="line">        url,</span><br><span class="line">        &#123;</span><br><span class="line">          ...data,</span><br><span class="line">        &#125;,</span><br><span class="line">        config,</span><br><span class="line">    ) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">ResponseData</span>&lt;T&gt;&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  patch&lt;T&gt; (<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">data</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt; = &#123;&#125;, <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span> = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="title function_">patch</span>(</span><br><span class="line">        url,</span><br><span class="line">        &#123;</span><br><span class="line">          ...data,</span><br><span class="line">        &#125;,</span><br><span class="line">        config,</span><br><span class="line">    ) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="title class_">ResponseData</span>&lt;T&gt;&gt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeader (<span class="attr">key</span>: <span class="built_in">string</span>, <span class="attr">value</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[key] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  delHeader (<span class="attr">key</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">axios</span>.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="接口Mock"><a href="#接口Mock" class="headerlink" title="接口Mock"></a>接口Mock</h1><p>在接口开发过程中，一般是后端给出接口文档，标注出接口响应体的数据结构，前端和后端并行开发。在后端没有完全开发好之前，前端需要Mock返回的数据，并编写对数据进行处理的逻辑，除了对数据进行手动Mock之外，这里也提供一些更接近真实场景Mock数据的方案</p>
<h2 id="Mock-JS"><a href="#Mock-JS" class="headerlink" title="Mock.JS"></a>Mock.JS</h2><p><a href="https://github.com/nuysoft/Mock">MockJS</a></p>
<p><a href="http://mockjs.com/examples.html">Mock示例</a></p>
<h2 id="本地服务器"><a href="#本地服务器" class="headerlink" title="本地服务器"></a>本地服务器</h2><h2 id="接口Mock平台"><a href="#接口Mock平台" class="headerlink" title="接口Mock平台"></a>接口Mock平台</h2><h3 id="Yapi"><a href="#Yapi" class="headerlink" title="Yapi"></a>Yapi</h3><p><a href="https://github.com/YMFE/yapi">Yapi</a></p>
<h3 id="Rap2"><a href="#Rap2" class="headerlink" title="Rap2"></a>Rap2</h3><p><a href="https://github.com/thx/rap2-delos">Rap2</a></p>
<h2 id="Apifox"><a href="#Apifox" class="headerlink" title="Apifox"></a>Apifox</h2><p>Apifox是比较好用也比较推荐实用</p>
<h1 id="错误码规范"><a href="#错误码规范" class="headerlink" title="错误码规范"></a>错误码规范</h1><p>前端和服务端应该有统一的错误码规范，每个错误码都应该有唯一的语义，后端返回给前端错误码时，前端根据不同的错误码执行不同的操作</p>
<h1 id="接口稳定性"><a href="#接口稳定性" class="headerlink" title="接口稳定性"></a>接口稳定性</h1><h2 id="接口重试"><a href="#接口重试" class="headerlink" title="接口重试"></a>接口重试</h2><p>接口重试是接口稳定性中非常重要的点，接口重试的应用场景主要有：</p>
<ul>
<li>用户网络情况较差</li>
<li>服务端出现故障抖动，无法及时响应前端请求</li>
</ul>
<p>接口重试需要设计好重试的策略，并且定好最大重试次数（一般情况下需要避免无限重试），同时也要做好对后端错误码的处理，前端和后端应该约定好几个固定的重复语义的错误码，前端收到错误码时，根据错误码判断是否需要重试</p>
<p>常见的接口重试策略有两种：</p>
<ul>
<li>定时重试（3，3，3，3，3…）：重试时间固定</li>
<li>冪次退避重试（1，4，9，16，25…）：重试间隔会慢慢变长，当服务器出现故障时，采取退避重试可以避免对服务器造成大冲击</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchRemoteData = (retryTime = <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">retry</span> = (<span class="params">err: <span class="built_in">any</span></span>)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (retryTime &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(</span><br><span class="line">        <span class="function">() =&gt;</span> <span class="title function_">fetchRemoteData</span>().<span class="title function_">then</span>(resolve, reject), <span class="title class_">Math</span>.<span class="title function_">pow</span>(retryTime, <span class="number">2</span>) * <span class="number">1000</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/config&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;, <span class="function">() =&gt;</span> <span class="title function_">retry</span>(retryTime + <span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接口并发限制"><a href="#接口并发限制" class="headerlink" title="接口并发限制"></a>接口并发限制</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>请求</tag>
        <tag>Axios</tag>
        <tag>稳定性</tag>
      </tags>
  </entry>
</search>
